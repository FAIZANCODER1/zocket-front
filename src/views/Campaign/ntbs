// ** React Imports
import { Fragment, useState, useEffect } from 'react'

// ** Invoice List Sidebar

// ** Table Columns
import { columns } from './Columns'

// ** Store & Actions
import { useDispatch, useSelector } from 'react-redux'

// ** Third Party Components
import Select from 'react-select'
import ReactPaginate from 'react-paginate'
import DataTable from 'react-data-table-component'
import { ChevronDown, Share, Printer, FileText, File, Grid, Copy, Search, Plus} from 'react-feather'

// ** Utils
import { selectThemeColors } from '@utils'

// ** Reactstrap Imports
import {
  Row,
  Col,
  Card,
  Input,
  Label,
  Button,
  CardBody,
  CardTitle,
  CardHeader,
  DropdownMenu,
  DropdownItem,
  DropdownToggle,
  UncontrolledDropdown
} from 'reactstrap'

// ** Styles
import '@styles/react/libs/react-select/_react-select.scss'
import '@styles/react/libs/tables/react-dataTable-component.scss'
const data = [
    {
    onoff: true,
    campaignpic:'',
    campaignn:'Bluberry cake Campaign',
    campaignd:'Created on 14 july',
    date:'25 jul 2020 - 01 Aug 2020',
    click: '300',
    budget:'INR 3400',
    location : 'chennai',
    platform : 'facebook',
    status : true

}
]
console.log(data, 'data')
// ** Table Header
const CustomHeader = ({handleFilter, searchTerm }) => {
  // ** Converts table to CSV
  // console.log(Object.keys(store.data[0]), 'store')

  // ** Downloads CSV

  return (
    <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>
      <Row>
        <Col
          md='6'
          className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'
        >
          <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>
            <Input
              id='search-invoice'
              className='ms-50 w-100 rounded'
              placeholder='Search for the campaign'
              type='text'
              value={searchTerm}
              onChange={e => handleFilter(e.target.value)}
            />
          </div>

       
        </Col>
        <Col md='6' className='d-flex justify-content-between'>
<div  className='d-flex align-items-center'>
    <span className='me-1'>Platform:</span>
    <Select
                isClearable={false}
                // value={currentRole}
                // options={roleOptions}
                className='react-select'
                classNamePrefix='select'
                theme={selectThemeColors}
                placeholder='All'
                />
</div>
<div  className='d-flex align-items-center'>
    <span className='me-1'>Status:</span>
    <Select
                isClearable={false}
                // value={currentRole}
                // options={roleOptions}
                className='react-select'
                classNamePrefix='select'
                theme={selectThemeColors}
                placeholder='true'
                />
</div>
<div  className='d-flex align-items-center'>
    <Select
                isClearable={false}
                // value={currentRole}
                // options={roleOptions}
                className='react-select'
                classNamePrefix='select'
                theme={selectThemeColors}
                placeholder= 'Last 30day'
                />
</div>

        </Col>
      </Row>
    </div>
  )
}

const UsersList = () => {
  // ** Store Vars
  const dispatch = useDispatch()
  const store = useSelector(state => state.users)

  // ** States
  const [sort, setSort] = useState('desc')
  const [searchTerm, setSearchTerm] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const [sortColumn, setSortColumn] = useState('id')
  const [rowsPerPage, setRowsPerPage] = useState(10)

  // ** Function to toggle sidebar

  // ** Get data on mount
  useEffect(() => {

  }, [dispatch, sort, sortColumn, currentPage])

  // ** User filter options
//   const roleOptions = [
//     { value: '', label: 'Select Role' },
//     { value: 'admin', label: 'Admin' },
//     { value: 'author', label: 'Author' },
//     { value: 'editor', label: 'Editor' },
//     { value: 'maintainer', label: 'Maintainer' },
//     { value: 'subscriber', label: 'Subscriber' }
//   ]

//   const planOptions = [
//     { value: '', label: 'Select Plan' },
//     { value: 'basic', label: 'Basic' },
//     { value: 'company', label: 'Company' },
//     { value: 'enterprise', label: 'Enterprise' },
//     { value: 'team', label: 'Team' }
//   ]

//   const statusOptions = [
//     { value: '', label: 'Select Status', number: 0 },
//     { value: 'pending', label: 'Pending', number: 1 },
//     { value: 'active', label: 'Active', number: 2 },
//     { value: 'inactive', label: 'Inactive', number: 3 }
//   ]

  // ** Function in get data on page change
  const handlePagination = page => {
    dispatch(
      getData({
        sort,
        sortColumn,
        q: searchTerm,
        perPage: rowsPerPage,
        page: page.selected + 1,
        role: currentRole.value,
        status: currentStatus.value,
        currentPlan: currentPlan.value
      })
    )
    setCurrentPage(page.selected + 1)
  }

  // ** Function in get data on rows per page
  const handlePerPage = e => {
    const value = parseInt(e.currentTarget.value)
    dispatch(
      getData({
        sort,
        sortColumn,
        q: searchTerm,
        perPage: value,
        page: currentPage,
        role: currentRole.value,
        currentPlan: currentPlan.value,
        status: currentStatus.value
      })
    )
    setRowsPerPage(value)
  }

  // ** Function in get data on search query change
  const handleFilter = val => {
    setSearchTerm(val)
    dispatch(
      getData({
        sort,
        q: val,
        sortColumn,
        page: currentPage,
        perPage: rowsPerPage,
        role: currentRole.value,
        status: currentStatus.value,
        currentPlan: currentPlan.value
      })
    )
  }

  // ** Custom Pagination
  const CustomPagination = () => {
    const count = Number(Math.ceil(10 / 4))

    return (
      <ReactPaginate
        previousLabel={''}
        nextLabel={''}
        pageCount={count || 1}
        activeClassName='active'
        forcePage={currentPage !== 0 ? currentPage - 1 : 0}
        onPageChange={page => handlePagination(page)}
        pageClassName={'page-item'}
        nextLinkClassName={'page-link'}
        nextClassName={'page-item next'}
        previousClassName={'page-item prev'}
        previousLinkClassName={'page-link'}
        pageLinkClassName={'page-link'}
        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}
      />
    )
  }

  // ** Table data to render
//   const dataToRender = () => {
//     const filters = {
//       q: searchTerm
//     }

//     const isFiltered = Object.keys(filters).some(function (k) {
//       return filters[k].length > 0
//     })

//     // if (store.data.length > 0) {
//     //   return store.data
//     // } else if (store.data.length === 0 && isFiltered) {
//     //   return []
//     // } else {
//     //   return store.allData.slice(0, rowsPerPage)
//     // }
//     console.log(isFiltered)
//   }

  const handleSort = (column, sortDirection) => {
    setSort(sortDirection)
    setSortColumn(column.sortField)
    dispatch(
      getData({
        sort,
        sortColumn,
        q: searchTerm,
        page: currentPage,
        perPage: rowsPerPage,
        role: currentRole.value,
        status: currentStatus.value,
        currentPlan: currentPlan.value
      })
    )
  }

  return (
    <Fragment>
   
          <Row className='mt-2 mb-2'>
            <Col md='6'>
           <h1>Your Campaigns</h1> 
           <span>Check the list of campigns you created </span>
            </Col>
            <Col md='6' className='d-flex justify-content-end'> 
            <Button className='add-new-user' color='primary'  style={{borderRadius : '10px'}}>
            <Plus/>Create new campaign </Button>
            </Col>
          </Row>
   

      <Card className='overflow-hidden'>
        <div className='react-dataTable'>
          <DataTable
            noHeader
            subHeader
            sortServer
            pagination
            responsive
            paginationServer
            columns={columns}
            onSort={handleSort}
            sortIcon={<ChevronDown />}
            className='react-dataTable'
            paginationComponent={CustomPagination}
            data={[]}
            subHeaderComponent={
              <CustomHeader
                store={store}
                searchTerm={searchTerm}
                rowsPerPage={rowsPerPage}
                handleFilter={handleFilter}
                handlePerPage={handlePerPage}
              />
            }
          />
        </div>
      </Card>

    </Fragment>
  )
}

export default UsersList
